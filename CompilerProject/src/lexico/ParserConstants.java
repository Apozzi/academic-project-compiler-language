package lexico;

public interface ParserConstants
{
    int START_SYMBOL = 45;

    int FIRST_NON_TERMINAL    = 45;
    int FIRST_SEMANTIC_ACTION = 94;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1,  2, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1,  5, -1, -1, -1, -1, -1,  5,  5, -1, -1, -1, -1, -1, -1, -1,  5, -1, -1, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1,  8,  7, -1, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 19, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 23, 25, 24, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, 29, 29, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 34, 34, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 30, 31, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, 30, -1, 31, 31, 31, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 18, 18, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 42, 42, 42, 42, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, 42, 42, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50, -1, -1, -1, -1, -1, -1, -1, -1, 51, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  4, -1, -1, -1, -1,  3, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 59, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 61, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 63, -1, -1, -1, 62, -1, -1, -1, -1, -1, 62, 62, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 64, 64, 64, 64, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 64, 64, -1 },
        { 65, 65, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, 65, -1, 65, 65, 65, -1, -1, -1, -1, -1, -1, -1, 65, 65, -1, -1, -1, 65, 66, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 68, 68, 68, 68, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, 68, 71, -1 },
        { -1, 72, 72, 72, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, 72, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, 76, 77, 78, 79, 80, -1, -1, -1, -1, -1 },
        { -1, 81, 81, 81, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 81, -1, -1 },
        { -1, 85, 85, 85, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, 85, -1, -1 },
        { 74, 74, -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, 74, -1, 74, 74, 74, -1, -1, -1, -1, -1, -1, -1, 74, 74, 73, -1, -1, 74, 74, 74, 73, 73, 73, 73, 73, -1, -1, -1, -1, -1 },
        { 82, 82, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, -1, 82, -1, 82, 82, 82, -1, -1, -1, -1, -1, -1, -1, 82, 82, 82, -1, -1, 82, 82, 82, 82, 82, 82, 82, 82, -1, 83, 84, -1, -1 },
        { -1, 89, 90, 91, 92, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, 95, -1, -1 },
        { 86, 86, -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, 86, -1, 86, 86, 86, -1, -1, -1, -1, -1, -1, -1, 86, 86, 86, -1, -1, 86, 86, 86, 86, 86, 86, 86, 86, 87, 86, 86, -1, 88 },
        { 96, 96, -1, -1, -1, -1, -1, -1, 96, -1, -1, -1, -1, 97, 96, -1, 96, 96, 96, -1, -1, -1, -1, -1, -1, -1, 96, 96, 96, -1, -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, -1, 96 }
    };

    int[][] PRODUCTIONS = 
    {
        { 109,   8,  46,  53,  56,  10,  57, 110 },
        {  23,   2,  30,  47,  76 },
        {   0 },
        {   0 },
        {   2,  30,  47,  76 },
        {  48 },
        {  49 },
        {  13 },
        {  12 },
        {  21 },
        {   6 },
        {  27,  50,  28 },
        {  51,  63 },
        {   0 },
        {  50 },
        {   2,  30,  48 },
        {   2, 116,  64 },
        {  32,  52 },
        {   0 },
        {   7,  52,  29,  55, 126,  79 },
        {   0 },
        {  22 },
        {  11 },
        {   3 },
        {   5 },
        {   4 },
        {  54 },
        {  24,  52,  30,  81, 115, 117,  80 },
        {   0 },
        {  59,  60 },
        {   0 },
        {  57 },
        {  61 },
        {  67 },
        {  72 },
        {  71 },
        {   2, 116,  58 },
        {  62 },
        {  65 },
        {  31,  82, 120 },
        {  20,  27,   2,  32,  82,  28 },
        {  17,  27,  52, 118,  28 },
        {  82, 108,  69 },
        {  32,  68 },
        {   0 },
        {  18,  27,  68,  28 },
        {  19,  27,  68,  28, 111 },
        {  26 },
        {  25 },
        { 121,  27,  82,  28,  70 },
        {  74 },
        {  75 },
        {  15, 122,  78,   9, 123 },
        {  16, 122,  78,  77,   9, 123 },
        {  30,  57 },
        { 124,  15,  30,  57 },
        {   0 },
        {  73, 122,  30,  57,   9, 125 },
        {   0 },
        {  52,  29,  55, 126,  79 },
        {   0 },
        {  52,  30,  81, 115, 117,  80 },
        {  48 },
        {   2 },
        {  84,  83 },
        {   0 },
        {  33,  84, 112,  83 },
        {  34,  84, 113,  83 },
        {  85 },
        {  22, 105 },
        {  11, 106 },
        {  43,  84, 107 },
        {  87,  89 },
        {  86, 103,  87, 104 },
        {   0 },
        {  29 },
        {  35 },
        {  36 },
        {  37 },
        {  38 },
        {  39 },
        {  88,  90 },
        {   0 },
        {  41,  88,  95,  90 },
        {  42,  88,  96,  90 },
        {  91,  92 },
        {   0 },
        {  40,  91,  97,  92 },
        {  44,  91,  98,  92 },
        {   2, 119,  93 },
        {   3,  99 },
        {   4, 100 },
        {   5, 114 },
        {  27,  82,  28 },
        {  41,  91, 101 },
        {  42,  91, 102 },
        {   0 },
        {  14,  27,   2,  28 }
    };

    String[] PARSER_ERROR =
    {   
        "",
        "esperado fim de programa",
        "esperado identificador",
        "esperado constante_inteira",
        "esperado constante_real",
        "esperado constante_caractere",
        "esperado bool",
        "esperado consts",
        "esperado def",
        "esperado end",
        "esperado execute",
        "esperado false",
        "esperado float",
        "esperado int",
        "esperado get",
        "esperado ifFalse",
        "esperado ifTrue",
        "esperado input",
        "esperado print",
        "esperado println",
        "esperado set",
        "esperado str",
        "esperado true",
        "esperado types",
        "esperado var",
        "esperado whileFalse",
        "esperado whileTrue",
        "esperado \"(\"",
        "esperado \")\"",
        "esperado \"=\"",
        "esperado \":\"",
        "esperado \":=\"",
        "esperado \",\"",
        "esperado \"&&\"",
        "esperado \"||\"",
        "esperado \"!=\"",
        "esperado \"<\"",
        "esperado \"<=\"",
        "esperado \">\"",
        "esperado \">=\"",
        "esperado \"*\"",
        "esperado \"+\"",
        "esperado \"-\"",
        "esperado \"!\"",
        "esperado \"/\"",
        "esperado def", // "<programa> inválido",
        "esperado consts, execute, types, var", //"<def_tipos> inválido",
        "esperado bool, float, int, str, (", // "<tipos> inválido",
        "esperado bool, float, int, str", //"<simples> inválido",
        "esperado (", //"<composto> inválido",
        "esperado identificador", //"<lista_de_campos> inválido",
        "esperado identificador",  //"<campo> inválido",
        "esperado identificador", //"<lista_identificadores> inválido",
        "esperado consts, execute, var", //"<def_constantes> inválido",
        "esperado false, true", //"<constante_logica> inválido",
        "esperado constante int, constante float, constante str, false, true", //"<valor> inválido",
        "esperado execute, var", //"<def_variaveis> inválido",
        "esperado comando", //"<lista_comandos> inválido",
        "esperado set, :=", //"<fat_at_ou_mtc> inválido",
        "esperado comando", //"<fat_lista_comandos> inválido",
        "esperado comando, fim de programa, end, ifFalse", //"<fat_li_com> inválido",
        "esperado identificador", //"<fat_atribuicao_e_man_tipos_compostos> inválido",
        "esperado :=", //"<atribuicao> inválido",
        "esperado identificador, )", //"<fat_campos> inválido",
        "esperado ), =, :, `,`", //"<fat_lista_identificadores> inválido",
        "esperado set", //"<man_tipos_compostos> inválido",
        "", //<and_equal> inválido",
        "esperado input", //"<entrada_dados> inválido",
        "esperado expressao", //<lista_expressao> inválido",
        "esperado ), `,`", //"<fat_lista_expressao> inválido",
        "esperado ifFalse, ifTrue, whileFalse, whileTrue", //"<fat_sel_ou_rep> inválido",
        "esperado (", //"<fat_selecao_ou_repeticao> inválido",
        "esperado print, println", //"<saída_dados> inválido",
        "esperado (", //"<while_true_while_false> inválido",
        "esperado ifFalse, ifTrue", //"<selecao> inválido",
        "esperado whileFalse, whileTrue", //"<repeticao> inválido",
        "esperado identificador, consts, execute, var", //"<reptipos> inválido",
        "esperado end, ifFalse", //"<optional_false> inválido",
        "esperado :", //"<params_if> inválido",
        "esperado identificador, execute, var", //"<repconsts> inválido",
        "esperado identificador, execute", //"<repvar> inválido",
        "esperado identificador, bool, float, int, str", //"<tiposvar> inválido",
        "esperado expressao", //"<expressão> inválido",
        "esperado expressao", //"<fat_exp> inválido",
        "esperado expressao", //"<elemento> inválido",
        "esperado expressao", //"<relacional> inválido",
        "esperado expressao", //"<operador_relacional> inválido",
        "esperado expressao", //"<aritmética> inválido",
        "esperado expressao", //"<termo> inválido",
        "esperado expressao", //"<fat_ari> inválido",
        "esperado expressao", //"<fat_aritmética> inválido",
        "esperado expressao", //"<fator> inválido",
        "esperado expressao", //"<fat_termo> inválido",
        "esperado expressao", //"<fat_identificador> inválido"
        /*"",
        "Era esperado fim de programa",
        "Era esperado identificador",
        "Era esperado constante_inteira",
        "Era esperado constante_real",
        "Era esperado constante_caractere",
        "Era esperado bool",
        "Era esperado consts",
        "Era esperado def",
        "Era esperado end",
        "Era esperado execute",
        "Era esperado false",
        "Era esperado float",
        "Era esperado int",
        "Era esperado get",
        "Era esperado ifFalse",
        "Era esperado ifTrue",
        "Era esperado input",
        "Era esperado print",
        "Era esperado println",
        "Era esperado set",
        "Era esperado str",
        "Era esperado true",
        "Era esperado types",
        "Era esperado var",
        "Era esperado whileFalse",
        "Era esperado whileTrue",
        "Era esperado \"(\"",
        "Era esperado \")\"",
        "Era esperado \"=\"",
        "Era esperado \":\"",
        "Era esperado \":=\"",
        "Era esperado \",\"",
        "Era esperado \"&&\"",
        "Era esperado \"||\"",
        "Era esperado \"!=\"",
        "Era esperado \"<\"",
        "Era esperado \"<=\"",
        "Era esperado \">\"",
        "Era esperado \">=\"",
        "Era esperado \"*\"",
        "Era esperado \"+\"",
        "Era esperado \"-\"",
        "Era esperado \"!\"",
        "Era esperado \"/\"",
        "<programa> inv�lido",
        "<def_tipos> inv�lido",
        "<tipos> inv�lido",
        "<simples> inv�lido",
        "<composto> inv�lido",
        "<lista_de_campos> inv�lido",
        "<campo> inv�lido",
        "<lista_identificadores> inv�lido",
        "<def_constantes> inv�lido",
        "<constante_logica> inv�lido",
        "<valor> inv�lido",
        "<def_variaveis> inv�lido",
        "<lista_comandos> inv�lido",
        "<fat_at_ou_mtc> inv�lido",
        "<fat_lista_comandos> inv�lido",
        "<fat_li_com> inv�lido",
        "<fat_atribuicao_e_man_tipos_compostos> inv�lido",
        "<atribuicao> inv�lido",
        "<fat_campos> inv�lido",
        "<fat_lista_identificadores> inv�lido",
        "<man_tipos_compostos> inv�lido",
        "<and_equal> inv�lido",
        "<entrada_dados> inv�lido",
        "<lista_expressao> inv�lido",
        "<fat_lista_expressao> inv�lido",
        "<fat_sel_ou_rep> inv�lido",
        "<fat_selecao_ou_repeticao> inv�lido",
        "<sa�da_dados> inv�lido",
        "<while_true_while_false> inv�lido",
        "<selecao> inv�lido",
        "<repeticao> inv�lido",
        "<reptipos> inv�lido",
        "<optional_false> inv�lido",
        "<params_if> inv�lido",
        "<repconsts> inv�lido",
        "<repvar> inv�lido",
        "<tiposvar> inv�lido",
        "<express�o> inv�lido",
        "<fat_exp> inv�lido",
        "<elemento> inv�lido",
        "<relacional> inv�lido",
        "<operador_relacional> inv�lido",
        "<aritm�tica> inv�lido",
        "<termo> inv�lido",
        "<fat_ari> inv�lido",
        "<fat_aritm�tica> inv�lido",
        "<fator> inv�lido",
        "<fat_termo> inv�lido",
        "<fat_identificador> inv�lido"*/
    };
}
